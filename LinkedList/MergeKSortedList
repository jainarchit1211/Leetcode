/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
       //Complexity O(NlogK)
    public ListNode mergeKLists(ListNode[] lists) {
        Comparator cp = new Comparator<ListNode>(){
            @Override
            public int compare(ListNode n1,ListNode n2){
                return n1.val - n2.val;
            }
        };
        
        PriorityQueue<ListNode> pq = new PriorityQueue(cp);
        for(ListNode lis : lists){
            if(lis!=null){
                pq.add(lis);
            }
         
        }
        ListNode head = new ListNode(0);
        ListNode itr = head;
        while(!pq.isEmpty()){
            itr.next  = pq.poll();
            itr = itr.next;
            if(itr.next!=null){
                pq.add(itr.next);
            }
        }
        return head.next;
    }
    //Complexity O(KN)
    public ListNode mergeKLists2(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        ListNode mergedNode = lists[0];
        for(int i =1;i<lists.length;i++){
            mergedNode = mergeList(lists[i],mergedNode);
        }
        return mergedNode;
    }
    
    public ListNode mergeList(ListNode node1, ListNode node2){
        ListNode head = new ListNode(0);
        ListNode fhead = head;
        while(node1!=null && node2!=null){
            if(node1.val < node2.val){
                head.next = node1;
                node1 = node1.next;
            }
            else {
                head.next = node2;
                node2 =node2.next;
            }
            head = head.next;
        }
        
        if(node1!=null) {
            head.next = node1;
        }
        else {
            head.next = node2;
        }
        return fhead.next;
    }
    
    
}
