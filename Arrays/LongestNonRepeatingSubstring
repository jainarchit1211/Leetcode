Given a string, find the length of the longest substring without repeating characters.

class Solution {
    public int lengthOfLongestSubstring2(String s) {
      HashMap<Character,Integer> map = new HashMap<>();
        int max = 0,start = -1;
        for(int i=0;i<s.length();i++){
            if(map.containsKey(s.charAt(i))){
                    max = Math.max(max,i-start-1);
                    int index = map.get(s.charAt(i));
                    while(start<index)
                    {
                        map.remove(s.charAt(start+1));
                        start++;
                    }
           
            }
            map.put(s.charAt(i),i);
        }
        return Math.max(max,s.length()-start-1);
    }
    
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
